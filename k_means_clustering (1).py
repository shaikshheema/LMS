# -*- coding: utf-8 -*-
"""K-Means clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mp5cf1VIbSQRgP6hd6uee9TKLSaJ4OG4
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")
from sklearn.cluster import KMeans

"""Clustering-Divide the universities in to groups(Clusters)"""

Univ=pd.read_csv("Universities1.csv")
Univ

Univ1.info()

Univ1.isna().sum()

Univ1.describe()

"""Standardization of Data

"""

#Read all numeric columns in to univ1
Univ1 = Univ.iloc[:,1:]

Univ1

cols=Univ1.columns

#Standardisation function
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_Univ_df = pd.DataFrame(scaler.fit_transform(Univ1),columns=cols)
scaled_Univ_df

#Build 3Cluster  using KMEans cluster algorithm
from sklearn.cluster import KMeans
clusters_new = KMeans(3, random_state=0) #specify 3 clusters
clusters_new.fit(scaled_Univ_df)

#Print the cluster labels
clusters_new.labels_

set(clusters_new.labels_)

#Assign clusters to the univ data set
Univ['clusterid_new'] = clusters_new.labels_

Univ[Univ['clusterid_new']==1]

# Use group by to find aggregated(mean ) values in each cluster
Univ.iloc[:,1:].groupby("clusterid_new").mean()

"""OBSERVATIONS
- Cluster 2 appears to be top rated universities cluster as the cut off score and Top 10, SFratio parameter mean values are highest
-Cluster 1 appears to occupy the middele level rated universities
- cluster 0 comes as the lower level rated universities

Finding optimal K value using elbow plot
"""

wcss = []
for i in range(1, 20):
  kmeans = KMeans(n_clusters=i, random_state=0)
  kmeans.fit(scaled_Univ_df)
  wcss.append(kmeans.inertia_)
print(wcss)
plt.plot(range(1, 20), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

"""- K value can be taken as 3 clusters or 4 clusters

"""

# Quality of clusters is expresssed in terms of silhoutte score
from sklearn.metrics import silhouette_score
score = silhouette_score(scaled_Univ_df,clusters_new.labels_, metric='euclidean')
score

