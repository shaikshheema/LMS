# -*- coding: utf-8 -*-
"""Decision_Tree_Classification_Reference.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MmxZ0C8ZAvMwSM0CazdXD0nAbXyccB51
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder

iris = pd.read_csv('iris.csv')

iris

#Bar plot for categorical column "Variety"
import seaborn as sns
counts = iris["variety"].value_counts()
sns.barplot(data=counts)

iris.info()

iris[iris.duplicated(keep=False)]

"""observations
- There are 150 rows and 5 columns
- There are no null values
- There is one duplicate row
- The x-columns are sepal.length,sepal.width,sepal.length and petal.width
- All the x-columns are continuous
- The y-column is "veriety" which is categorical
- There are three flower categories(classes)
"""

#Drop the duplicaates
iris = iris.drop_duplicates(keep='first')

#ensure further that no duplicated rows are present
iris[iris.duplicated]

#reset the index
iris = iris.reset_index(drop=True)
iris

#Encode the three flower classes as 0,1,2

labelencoder = LabelEncoder()
iris.iloc[:, -1] = labelencoder.fit_transform(iris.iloc[:, -1])
iris.head()

iris.info()

"""***Observation***
- The target column('variety') is still object type. it needs to be converted to numeric(int)
"""

#convert the target  column datatype to integer
iris['variety']=pd.to_numeric(labelencoder.fit_transform(iris['variety']))
print(iris.info())

#Divide the dataset  into x-coolums and y-columns
X=iris.iloc[:,0:4]
Y=iris['variety']

Y

X

X_train, x_test, Y_train, y_test = train_test_split(X,Y, test_size=0.3, random_state = 10)
X_train.head(20)

X_train, x_test, Y_train, y_test = train_test_split(X,Y, test_size=0.3, random_state = 10)
X_train

model = DecisionTreeClassifier(criterion = 'entropy',max_depth = None)
model.fit(X_train,Y_train)

plt.figure(dpi=120)
tree.plot_tree(model);

